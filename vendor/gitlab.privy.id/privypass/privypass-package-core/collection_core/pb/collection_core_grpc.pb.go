// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: collection_core.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceCollectionCoreClient is the client API for ServiceCollectionCore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceCollectionCoreClient interface {
	Retrive(ctx context.Context, in *RetriveRequestProto, opts ...grpc.CallOption) (*RetriveResponseProto, error)
	Save(ctx context.Context, in *SaveRequestProto, opts ...grpc.CallOption) (*SaveResponseProto, error)
}

type serviceCollectionCoreClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceCollectionCoreClient(cc grpc.ClientConnInterface) ServiceCollectionCoreClient {
	return &serviceCollectionCoreClient{cc}
}

func (c *serviceCollectionCoreClient) Retrive(ctx context.Context, in *RetriveRequestProto, opts ...grpc.CallOption) (*RetriveResponseProto, error) {
	out := new(RetriveResponseProto)
	err := c.cc.Invoke(ctx, "/collection_core_pb.ServiceCollectionCore/Retrive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceCollectionCoreClient) Save(ctx context.Context, in *SaveRequestProto, opts ...grpc.CallOption) (*SaveResponseProto, error) {
	out := new(SaveResponseProto)
	err := c.cc.Invoke(ctx, "/collection_core_pb.ServiceCollectionCore/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceCollectionCoreServer is the server API for ServiceCollectionCore service.
// All implementations must embed UnimplementedServiceCollectionCoreServer
// for forward compatibility
type ServiceCollectionCoreServer interface {
	Retrive(context.Context, *RetriveRequestProto) (*RetriveResponseProto, error)
	Save(context.Context, *SaveRequestProto) (*SaveResponseProto, error)
	mustEmbedUnimplementedServiceCollectionCoreServer()
}

// UnimplementedServiceCollectionCoreServer must be embedded to have forward compatible implementations.
type UnimplementedServiceCollectionCoreServer struct {
}

func (UnimplementedServiceCollectionCoreServer) Retrive(context.Context, *RetriveRequestProto) (*RetriveResponseProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrive not implemented")
}
func (UnimplementedServiceCollectionCoreServer) Save(context.Context, *SaveRequestProto) (*SaveResponseProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedServiceCollectionCoreServer) mustEmbedUnimplementedServiceCollectionCoreServer() {}

// UnsafeServiceCollectionCoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceCollectionCoreServer will
// result in compilation errors.
type UnsafeServiceCollectionCoreServer interface {
	mustEmbedUnimplementedServiceCollectionCoreServer()
}

func RegisterServiceCollectionCoreServer(s grpc.ServiceRegistrar, srv ServiceCollectionCoreServer) {
	s.RegisterService(&ServiceCollectionCore_ServiceDesc, srv)
}

func _ServiceCollectionCore_Retrive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetriveRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCollectionCoreServer).Retrive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection_core_pb.ServiceCollectionCore/Retrive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCollectionCoreServer).Retrive(ctx, req.(*RetriveRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceCollectionCore_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCollectionCoreServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection_core_pb.ServiceCollectionCore/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCollectionCoreServer).Save(ctx, req.(*SaveRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceCollectionCore_ServiceDesc is the grpc.ServiceDesc for ServiceCollectionCore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceCollectionCore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collection_core_pb.ServiceCollectionCore",
	HandlerType: (*ServiceCollectionCoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Retrive",
			Handler:    _ServiceCollectionCore_Retrive_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _ServiceCollectionCore_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collection_core.proto",
}
